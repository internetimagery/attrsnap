Incorporate distance as a dimension in the vector.

ie: (distance, attr1, attr2, att3, etc...)

Then use vector math to work out which way to go based on existing moves.

Perhaps project all positions onto a plane. Generate curve on that plane.
Then for each axis do the same (skipping the distance axis).
The convergeance point of all curves gives a prediction

https://github.com/Tom-Alexander/regression-js/blob/master/src/regression.js
http://www.stat.ucla.edu/~rosario/classes/091/112-1b/regression.pdf
http://www.alisonpearce.net/wp-content/uploads/2013/05/Fun-Reg-Cheat-Sheet.pdf
https://en.wikipedia.org/wiki/Polynomial_regression
https://blog.demofox.org/2016/12/22/incremental-least-squares-curve-fitting/
https://spin.atomicobject.com/2014/06/24/gradient-descent-linear-regression/
https://en.wikipedia.org/wiki/Stochastic_gradient_descent#Background

could try:
take three points. order by distance.
get point in between closest two controlPoints
get vector from midpoint to furthest point
normal and scale by scalar
repeat!
